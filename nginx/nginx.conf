worker_processes auto; # 设置 Nginx 工作进程数，auto 表示自动设置为 CPU 核心数。生产建议：可显式指定数量，如 worker_processes 4;（4核CPU）

events {
    worker_connections 1024; # 作用：定义每个 worker 进程的最大连接数，计算总并发：worker_processes * worker_connections（本例为 auto*1024）
    use epoll; # 高性能事件模型（Linux特有，Windows自动忽略
}

http {
    include mime.types; # 作用：引入 MIME 类型定义文件，文件位置：通常位于 /etc/nginx/mime.types
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # 访问日志
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 50M;  # 允许大文件上传

    # Gzip压缩
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # HTTPS重定向
    server {
        listen 80;
#         server_name yourdomain.com;
        server_name localhost;
        return 301 https://$host$request_uri;
    }

    # HTTPS服务器
    server {
        listen 443 ssl http2;
#         server_name yourdomain.com;
        server_name localhost;

        # SSL证书配置
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # 静态文件服务
        location /static/ {
            alias /app/app/static/;
            expires 30d;
            access_log off;
        }

        # FastAPI代理
        location / {
            proxy_pass http://web:8000;  # 將請求代理到FastAPI容器
            proxy_set_header Host $host;  # 將請求的Host头转发给后端服务
            proxy_set_header X-Real-IP $remote_addr; # 将客户端的IP地址转发给后端服务
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 将客户端的IP地址转发给后端服务
            proxy_set_header X-Forwarded-Proto $scheme; # 将请求的协议转发给后端服务

            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade"; # 允许代理 WebSocket 连接， 触发条件：当请求包含 Upgrade: websocket 头时
        }
    }
}